# -*- coding: utf-8 -*-
"""sms-spam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iflpHTTGVdDN1BAjpr__aQBLfaN8BRP5
"""

import numpy as np
import pandas as pd

df = pd.read_csv('spam.csv', encoding='latin-1')

df.sample(5)

df.shape

#data cleaning



"""Data cleaning

"""

df.info()

df = df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'])

df.sample(5)

df = df.rename(columns={'v1':'target', 'v2':'text'})

df.sample(5)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()

encoder.fit_transform(df['target'])

df.isnull().sum()

#check for duplicate
df.duplicated().sum()



#remove duplicate
df = df.drop_duplicates(keep='first')

df.shape

df.duplicated().sum()



"""EDA"""

df['target'].value_counts()

import matplotlib.pyplot as plt

# Get the counts of spam and ham messages
spam_counts = df['target'].value_counts()

# Create a pie chart
plt.figure(figsize=(6, 6))
plt.pie(spam_counts, labels=['ham', 'spam'], autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Spam and Ham Messages')
plt.show()

import nltk
nltk.download('punkt')
nltk.download('punkt_tab') # Download the missing resource

df['num_characters'] = df['text'].apply(len)
df['num_words'] = df['text'].apply(lambda x:len(nltk.word_tokenize(x)))
df['num_sentences'] = df['text'].apply(lambda x:len(nltk.sent_tokenize(x)))

display(df.head())

import seaborn as sns

# Plot histograms for each numerical feature, separated by target
for col in ['num_characters', 'num_words', 'num_sentences']:
    plt.figure(figsize=(12, 6))
    sns.histplot(df[df['target'] == 'ham'][col], color='blue', label='Ham', kde=True)
    sns.histplot(df[df['target'] == 'spam'][col], color='red', label='Spam', kde=True)
    plt.title(f'Distribution of {col} for Spam vs. Ham')
    plt.xlabel(col)
    plt.ylabel('Frequency')
    plt.legend()
    plt.show()

import seaborn as sns

# Calculate the correlation matrix
correlation_matrix = df[['num_characters', 'num_words', 'num_sentences']].corr()

# Create a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap of Numerical Features')
plt.show()

"""Data preprocessing

"""

import string
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

ps = PorterStemmer()

def transform_text(text):
    text = text.lower() # lowercase
    text = nltk.word_tokenize(text) # create tokens

    y = []
    for i in text:
        if i.isalnum(): # remove special characters
            y.append(i)

    text = y[:]
    y.clear()

    for i in text:
        if i not in stopwords.words('english') and i not in string.punctuation: # remove stop words and punctuation
            y.append(i)

    text = y[:]
    y.clear()

    for i in text: # apply stemming
        y.append(ps.stem(i))

    return " ".join(y)

df['transformed_text'] = df['text'].apply(transform_text)

display(df.head())

import nltk
nltk.download('stopwords')



"""Model bulding"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Use TfidfVectorizer instead of CountVectorizer
cv = TfidfVectorizer(max_features=3000) # Limiting features can sometimes help
X = cv.fit_transform(df['transformed_text']).toarray()
y = df['target'].values

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)

from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, precision_score

# Train a Multinomial Naive Bayes model
mnb = MultinomialNB()
mnb.fit(X_train, y_train)

# Make predictions on the test set
y_pred = mnb.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='spam') # Specify pos_label

print(f'Accuracy: {accuracy}')
print(f'Confusion Matrix:\n{cm}')
print(f'Precision: {precision}')

import pickle

# Create pickle file for the model
pickle.dump(mnb, open('spam_detector_model.pkl', 'wb'))

# Create pickle file for the vectorizer
pickle.dump(cv, open('tfidf_vectorizer.pkl', 'wb'))